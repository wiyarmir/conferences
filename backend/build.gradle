import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = 'es.guillermoorellana.keynotedex'
version = '0.0.1-SNAPSHOT'

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: "com.github.johnrengelman.shadow"

mainClassName = "es.guillermoorellana.keynotedex.backend.ServerKt"

sourceCompatibility = 1.8

compileKotlin.kotlinOptions.jvmTarget = '1.8'
compileTestKotlin.kotlinOptions.jvmTarget = '1.8'

sourceSets {
    release {
        kotlin {
            srcDirs += sourceSets.main.kotlin.srcDirs
        }
        resources {
            srcDirs += sourceSets.main.resources.srcDirs
        }

        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    releaseCompile.extendsFrom compile
}

dependencies {
    compile project(":common-jvm")
    
    compile Libs.kotlinStdlib
    compile Libs.kotlinReflect

    compile Libs.ktorLocations
    compile Libs.ktorGson
    compile Libs.ktorFreemaker
    compile Libs.ktorHtmlBuilder
    compile Libs.ktorServerNetty
    compile Libs.ktorClientApache

    compile Libs.ehcache

    compile Libs.squashH2

    testCompile Libs.kotlinTestJunit
    testCompile Libs.ktorServerTestHost
    testCompile Libs.jsoup

    compile Libs.gson
    compile Libs.logbackClassic
    compile Libs.fuel
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task releaseJar(type: ShadowJar) {
    manifest {
        attributes "Main-Class": "es.guillermoorellana.keynotedex.backend.ServerKt"
    }
    classifier = 'release'
    from([sourceSets.release.output, sourceSets.main.output])
    configurations = [project.configurations.compile]
}

task release() {
    dependsOn('clean')
    dependsOn('releaseJar')
}

releaseJar.mustRunAfter clean

task copyWebBundle(type: Copy) {
    dependsOn(':web:build')
    from('../web/build/bundle')
    into('build/resources/release')
}

processReleaseResources.dependsOn copyWebBundle
