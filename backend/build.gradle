import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group = 'es.guillermoorellana.keynotedex'
version = keynotedexVersion

apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"

mainClassName = "io.ktor.server.netty.EngineMain"

sourceCompatibility = 1.8

compileKotlin.kotlinOptions.jvmTarget = '1.8'
compileTestKotlin.kotlinOptions.jvmTarget = '1.8'

sourceSets {
    release {
        kotlin {
            srcDirs += sourceSets.main.kotlin.srcDirs
        }
        resources {
            srcDirs += sourceSets.main.resources.srcDirs
        }

        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    releaseCompile.extendsFrom compile
}

dependencies {
    implementation project(":common")

    implementation Libs.kotlinStdlib
    implementation Libs.kotlinReflect

    implementation Libs.kotlinxSerializationRuntime
    
    implementation Libs.ktorLocations
    implementation Libs.ktorFreemaker
    implementation Libs.ktorHtmlBuilder
    implementation Libs.ktorServerNetty
    implementation Libs.ktorClientApache
    implementation Libs.ktorAuthJwt

    implementation Libs.ehcache

    implementation(Libs.squashH2){
        exclude group: "org.jetbrains.kotlin"
    }

    testCompile Libs.kotlinTestJunit
    testCompile Libs.ktorServerTestHost
    testCompile Libs.jsoup
    testCompile Libs.mockitoKotlin

    implementation Libs.logbackClassic
    implementation Libs.fuel
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task releaseJar(type: ShadowJar) {
    manifest {
        attributes "Main-Class": mainClassName
    }
    classifier = 'release'
    from([sourceSets.release.output, sourceSets.main.output])
    configurations = [project.configurations.compile]
}

task release() {
    dependsOn('clean')
    dependsOn('releaseJar')
}

releaseJar.mustRunAfter clean

task copyWebBundle(type: Copy) {
    dependsOn(':web:build')
    from('../web/build/bundle')
    into('build/resources/release')
}

processReleaseResources.dependsOn copyWebBundle
